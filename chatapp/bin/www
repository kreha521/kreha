#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * WebSocket調査中
 */

//var fs = require("fs");
var io = require("socket.io").listen(server);

//Socket.io Communication
io.sockets.on('connection', require('../routes/socket'));

//app.set('socketio', io);
//var socketio = app.get('socketio');
//
//var psstat = socketio.of('/psstat');
//psstat.emit('connection', {value:"全員にプッシュ送信"});
//
//psstat.on("pushStatus", function (socket) {
//    console.log("on connection event!");
//    psstat.emit('pushStatus', {value:"全員にプッシュ送信"});
//    psstat.to(socket.id).emit('pushStatus', {value:socket.id + "さんにプッシュ送信"});
//});

// emitterがエラーで動かない。Redisサーバ立てろって書いてある。。。どうしろと。。。
// http://qiita.com/n0bisuke/items/c248af316ca3f27daf92

//var io = require('socket.io').listen(server);
//var redis = require('socket.io-redis'); //++�ǋL
//io.adapter(redis({ host: 'localhost', port: 6379 })); //++�ǋL
//
//var emitter = require('socket.io-emitter')({ host: 'localhost', port: 6379 });
//setInterval(function(){
//	emitter.emit('pushStatus', {value:"testtt"});
//}, 5000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
